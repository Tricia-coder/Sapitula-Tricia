import java.util.Arrays;

public class RadixSort {

    // The main function that sorts arr[] of size n using Radix Sort
    static void radixSort(int[] arr, int n, int[] counter) {
        counter[0]++; // Increment for function call
        int max = arr[0]; // Assume the first element is the maximum

        // Find the maximum number to know the number of digits
        for (int i = 1; i < n; i++) {
            counter[0]++; // Increment for loop iteration
            if (arr[i] > max) {
                max = arr[i]; // Update max if current element is greater
            }
        }

        // Do counting sort for every digit
        for (int exp = 1; max / exp > 0; exp *= 10) {
            counter[0]++; // Increment for loop iteration
            int[] output = new int[n]; // Output array to hold sorted values
            int[] count = new int[10]; // Count array to store count of occurrences

            // Initialize count array to 0
            Arrays.fill(count, 0);

            // Store count of occurrences in count[]
            for (int i = 0; i < n; i++) {
                counter[0]++; // Increment for loop iteration
                count[(arr[i] / exp) % 10]++; // Increment count for the digit
            }

            // Change count[i] so that count[i] now contains actual position of this digit in output[]
            for (int i = 1; i < 10; i++) {
                counter[0]++; // Increment for loop iteration
                count[i] += count[i - 1]; // Cumulative count
            }

            // Build the output array
            for (int i = n - 1; i >= 0; i--) {
                counter[0]++; // Increment for loop iteration
                output[count[(arr[i] / exp) % 10] - 1] = arr[i]; // Place the element in the output array
                count[(arr[i] / exp) % 10]--; // Decrease count for the digit
            }

            // Copy the output array to arr[], so that arr[] now contains sorted numbers according to current digit
            for (int i = 0; i < n; i++) {
                counter[0]++; // Increment for loop iteration
                arr[i] = output[i]; // Copy sorted values back to original array
            }
        }
    }

    // A utility function to print an array
    static void printArray(int[] arr) {
        for (int value : arr) {
            System.out.print(value + " "); // Print each element
        }
        System.out.println(); // New line after printing the array
    }

    // Driver code
    public static void main(String[] args) {
        int[] arr = {728,486,408,840,991,829,715,447,49,157,151,218,668,709,763,971,912,431,706,972,48,502,596,934,191,630,424,381,322,503,959,121,286,665,391,452,879,743,486,493,86,870,908,56,733,319,462,874,10,90,139,389,118,977,765,60,222,770,847,908,431,939,259,510,944,308,639,950,508,71,198,485,382,554,86,300,295,649,960,761,333,610,275,738,146,759,84,979,549,584,191,175,564,67,997,611,919,632,507,713,950,841,861,803,125,877,261,469,450,462,489,334,715,143,228,174,261,108,476,188,952,174,814,753,313,213,273,830,185,778,862,747,660,318,424,147,773,943,677,470,365,636,757,404,627,91,94,398,397,91,310,633,116,717,836,616,934,874,140,250,348,957,713,623,22,501,23,385,95,959,30,536,512,230,656,947,780,988,696,449,26,366,935,65,328,820,448,576,737,819,214,792,231,703,591,391,213,798,470,540,374,728,819,153,92,62,733,596,566,865,855,242,88,460,358,171,528,865,781,466,676,353,883,911,223,294,25,423,872,161,247,953,777,585,582,836,61,252,593,515,662,474,778,364,838,492,457,303,959,976,938,563,50,702,436,13,738,471,752,389,109,403,918,219,106,473,813,457,673,299,475,715,664,76,156,718,814,866,482,366,399,579,348,980,725,569,310,317,929,121,83,345,292,886,796,165,240,854,399,805,104,279,63,915,166,489,29,131,976,826,372,308,84,200,393,84,495,508,219,693,74,408,710,127,967,842,406,429,226,406,975,735,185,135,463,732,113,212,213,120,525,679,218,143,895,300,427,302,706,770,234,70,472,376,459,980,514,648,806,929,924,148,944,185,973,399,703,707,138,954,202,733,184,199,310,685,442,104,556,202,547,460,680,342,921,255,735,550,334,621,617,370,810,634,244,49,733,233,633,931,464,630,188,73,901,40,102,653,487,350,871,117,281,829,614,163,675,530,177,468,870,883,303,600,232,102,296,780,30,653,675,608,360,820,440,861,322,106,219,163,914,921,910,906,791,402,938,518,243,864,215,283,679,419,41,326,921,835,548,697,996,973,428,149,689,145,247,93,489,138,683,817,947,382,2,717,346,962,919,423,241,406,332,583,185,343,709,862,975,365,659,619,426,392,830,180,50,3,522,455,407,503,789,334,151,498,983,561,939,976,722,94,84,199,431,176,545,228,572,787,790,714,555,447,79,940,815,415,723,361,893,620,629,85,874,618,462,232,125,805,669,933,430,928,358,567,285,881,378,870,579,825,708,166,328,489,400,255,738,483,112,153,174,804,899,357,204,217,125,758,481,736,883,660,473,353,532,579,231,245,90,474,805,653,254,765,435,750,508,103,769,926,511,599,493,457,193,408,847,72,13,970,541,325,184,320,880,365,302,48,111,960,896,948,499,944,274,936,997,545,258,375,182,388,809,582,766,362,572,679,891,180,552,511,747,106,112,311,613,168,329,378,450,43,370,711,762,926,523,255,504,231,597,627,402,922,39,9,218,565,514,309,427,559,263,50,302,680,810,530,212,928,18,939,140,277,611,372,460,395,861,962,323,141,722,167,578,774,391,691,158,922,309,288,444,459,296,758,302,188,418,364,530,767,42,707,340,408,779,226,706,218,976,557,767,955,880,972,98,941,766,548,30,127,215,34,971,291,176,727,69,445,70,296,87,703,478,117,151,151,426,960,173,481,83,865,744,584,478,500,675,352,764,808,636,523,413,418,642,606,528,590,620,699,449,801,271,354,903,310,614,169,829,275,207,239,192,544,802,703,514,564,977,67,672,356,66,914,484,88,166,946,249,290,333,175,170,236,965,414,283,130,173,554,518,340,437,572,534,911,569,412,707,626,293,105,506,348,112,787,512,777,66,386,522,5,252,124,8,10,920,686,705,695,672,655,47,568,428,489,296,538,757,961,678,828,516,177,564,594,591,720,31,497,787,436,492,938,854,530,251,618,889,228,245,129,161,753,306,817,940,321,777,338,794,19,35,288,901,527,664,481,946,562,141,616,847,204,34,909,326,53,410,345,816,974,810,796,118,923,195,684,73,258,509,553,789,128,230,843,505,761,404,988,971,993,626,978,921,774,73,700,261,665,66,588,871,526,26,657,624,516,454,278,313,868,644,646,550,231,514,144,817,1,822,973,583,902,694,208,920,394,278,642,198,484,518,787,5,406,166,534,216,340,234,993,9,585,23,911,767,519,422,314,987,165,844,935,864,724,135,227,360,470,155,302,867,17,500,139,49,933,698,607,765,944,691,780,179,224}; // Array to be sorted
        int n = arr.length; // Get the size of the array
        int[] counter = {0}; // Initialize counter as an array to keep track of operations

        // Print the original array
        System.out.println("Original array:");
        printArray(arr);

        // Function call to perform Radix Sort
        radixSort(arr, n, counter);

        // Print the sorted array
        System.out.println("Sorted array:");
        printArray(arr);

        // Print the final counter value
        System.out.println("Final counter: " + counter[0]);
    }
}
